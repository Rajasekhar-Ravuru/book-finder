import React, { useEffect, useMemo, useRef, useState } from "react";

const PAGE_SIZE = 20;

function coverUrl(coverId, size = "M") {
  return coverId
    ? `https://covers.openlibrary.org/b/id/${coverId}-${size}.jpg`
    : null;
}

export default function App() {
  const [query, setQuery] = useState("");
  const [searchBy, setSearchBy] = useState("title"); // title | author | subject
  const [page, setPage] = useState(1);

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const controllerRef = useRef(null);

  const canSearch = query.trim().length > 0;

  const url = useMemo(() => {
    const base = new URL("https://openlibrary.org/search.json");
    if (query.trim()) base.searchParams.set(searchBy, query.trim());
    base.searchParams.set("page", String(page));
    base.searchParams.set("limit", String(PAGE_SIZE));
    return base.toString();
  }, [query, searchBy, page]);

  const doSearch = async () => {
    if (!canSearch) {
      setData(null);
      setError(null);
      return;
    }
    controllerRef.current?.abort();
    const controller = new AbortController();
    controllerRef.current = controller;

    setLoading(true);
    setError(null);

    try {
      const res = await fetch(url, { signal: controller.signal });
      if (!res.ok) throw new Error(`Request failed: ${res.status}`);
      const json = await res.json();
      setData(json);
    } catch (e) {
      if (e.name === "AbortError") return;
      setError(e?.message || "Something went wrong");
      setData(null);
    } finally {
      setLoading(false);
    }
  };

  // Trigger search when page changes
  useEffect(() => {
    if (canSearch) doSearch();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page]);

  const onSubmit = (e) => {
    e.preventDefault();
    setPage(1);
    doSearch();
  };

  const total = data?.numFound ?? 0;
  const showingFrom = canSearch && data ? data.start + 1 : 0;
  const showingTo = canSearch && data ? data.start + data.docs.length : 0;
  const totalPages = total > 0 ? Math.ceil(total / PAGE_SIZE) : 0;

  return (
    <div className="min-h-screen bg-slate-50">
      <header className="bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-500 text-white shadow">
        <div className="max-w-8xl mx-auto px-4 py-6 flex flex-col sm:flex-row sm:items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Book Finder</h1>
            <p className="text-base opacity-80">Search books by title, author, or subject</p>
          </div>
        </div>
      </header>


      <main className="max-w-7xl mx-auto px-4 py-6 space-y-6">
        {/* Search Form */}
        <section className="bg-white p-4 rounded shadow-sm">
          <form onSubmit={onSubmit} className="flex flex-col md:flex-row gap-3">
            <div className="flex items-center gap-2">
              <select
                value={searchBy}
                onChange={(e) => setSearchBy(e.target.value)}
                className="border rounded px-3 py-2 bg-white"
              >
                <option value="title">Title</option>
                <option value="author">Author</option>
                <option value="subject">Subject</option>
              </select>
            </div>

            <input
              className="flex-1 border rounded px-3 py-2"
              placeholder={`Search by ${searchBy}… e.g. "harry potter"`}
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              aria-label="Search query"
            />

            <button
              type="submit"
              disabled={!canSearch || loading}
                className="bg-gradient-to-r from-pink-500 to-purple-500 text-white font-semibold px-6 py-2 rounded-lg shadow hover:opacity-90 transition disabled:opacity-50"
            >
              {loading ? "Searching…" : "Search"}
            </button>
          </form>

          <div className="text-xs text-slate-500 mt-2">
            Try: <span className="font-medium">harry potter</span>,{" "}
            <span className="font-medium">agatha christie</span>,{" "}
            <span className="font-medium">machine learning</span>
          </div>
        </section>

        {/* Status / Errors */}
        <section>
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded">
              <strong>Error:</strong> {error}
            </div>
          )}

          {!canSearch && (
            <div className="bg-white p-6 rounded shadow-sm text-center text-slate-600">
              Enter a search term above and press Search to find books.
            </div>
          )}
        </section>

        {/* Results */}
        {canSearch && !error && (
          <section className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="text-sm text-slate-600">
                {loading ? (
                  <span>Loading…</span>
                ) : data ? (
                  total > 0 ? (
                    <span>
                      Showing <strong>{showingFrom}</strong>–
                      <strong>{showingTo}</strong> of{" "}
                      <strong>{total.toLocaleString()}</strong>
                    </span>
                  ) : (
                    <span>No results found.</span>
                  )
                ) : (
                  <span />
                )}
              </div>

              <div className="flex items-center gap-2">
                <button
                  onClick={() => setPage((p) => Math.max(1, p - 1))}
                  disabled={page <= 1 || loading}
                  className="border px-3 py-1 rounded disabled:opacity-60"
                >
                  Prev
                </button>
                <div className="text-xs text-slate-600">
                  Page {page}
                  {totalPages ? ` / ${totalPages}` : ""}
                </div>
                <button
                  onClick={() =>
                    setPage((p) =>
                      totalPages > 0 ? Math.min(totalPages, p + 1) : p + 1
                    )
                  }
                  disabled={loading || (totalPages > 0 && page >= totalPages)}
                  className="border px-3 py-1 rounded disabled:opacity-60"
                >
                  Next
                </button>
              </div>
            </div>

            {/* Skeleton Loader */}
            {loading && !data && (
              <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                {Array.from({ length: 6 }).map((_, i) => (
                  <div
                    key={i}
                    className="animate-pulse bg-white rounded shadow p-4 h-56"
                  />
                ))}
              </div>
            )}

            {/* Books Grid */}
            {data && data.docs.length > 0 && (
              <ul className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {data.docs.map((doc) => (
                  <li
                    key={doc.key}
                    className="bg-white rounded shadow overflow-hidden flex flex-col"
                  >
                    <div className="aspect-[4/4] bg-slate-100 flex items-center justify-center">
                      {doc.cover_i ? (
                        <img
                          src={coverUrl(doc.cover_i, "M")}
                          alt={doc.title}
                          className="h-full w-full object-cover"
                        />
                      ) : (
                        <div className="text-slate-400">No cover</div>
                      )}
                    </div>
                    <div className="p-3 flex-1 flex flex-col">
                      <h3 className="font-semibold text-sm mb-1 line-clamp-2">
                        {doc.title}
                      </h3>
                      <p className="text-xs text-slate-600 mb-2">
                        {doc.author_name?.join(", ") ?? "Unknown author"}
                      </p>
                      <div className="mt-auto flex items-center justify-between">
                        <span className="text-xs text-slate-500">
                          {doc.first_publish_year ?? "—"}
                        </span>
                        <a
                          className="text-xs text-blue-600 hover:underline"
                          href={`https://openlibrary.org${doc.key}`}
                          target="_blank"
                          rel="noreferrer"
                        >
                          Open
                        </a>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}

            {/* Empty State */}
            {data && data.docs.length === 0 && (
              <div className="bg-white p-6 rounded shadow text-center text-slate-600">
                No books matched your search.
              </div>
            )}
          </section>
        )}
      </main>

      <footer className="max-w-6xl mx-auto px-4 py-8 text-xs text-slate-500 text-center">
        Data from Open Library. This is a demo for educational purposes.
      </footer>
    </div>
  );
}
